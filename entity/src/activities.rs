//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1
//-------------------------------------------------------------------------------------------------
// Activity
//-------------------------------------------------------------------------------------------------

use sea_orm::entity::prelude::*;

// Old diesel schema for reference:
// table! {
//     activities (id) {
//         id -> Int4,
//         name -> Text,
//         mode -> Nullable<Text>,
//         min_fireteam_size -> Int4,
//         max_fireteam_size -> Int4,
//         min_light -> Nullable<Int4>,
//         min_level -> Nullable<Int4>,
//     }
// }

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "activities")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub mode: Option<String>,
    pub min_fireteam_size: i32,
    pub max_fireteam_size: i32,
    pub min_light: Option<i32>,
    pub min_level: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::activityshortcuts::Entity")]
    ActivityShortcuts,
    #[sea_orm(has_many = "super::plannedactivities::Entity")]
    PlannedActivities,
}

impl Related<super::activityshortcuts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ActivityShortcuts.def()
    }
}

impl Related<super::plannedactivities::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlannedActivities.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub fn format_name(&self) -> String {
        format!("{} {}", self.name, self.mode.clone().unwrap_or_default())
    }
}

#[cfg(test)]
mod tests {
    use {
        crate::establish_db_connection,
        anyhow::Result,
        dotenv::dotenv,
        sea_orm::{EntityTrait, PaginatorTrait},
    };

    #[tokio::test]
    #[ignore]
    async fn test_activities() -> Result<()> {
        dotenv().ok();
        let db = establish_db_connection().await?;

        let mut results = super::Entity::find().paginate(&db, 10);

        while let Some(activities) = results.fetch_and_next().await? {
            for act in activities {
                println!("{}", act.format_name());
            }
        }

        Ok(())
    }
}

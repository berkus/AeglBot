//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1
//-------------------------------------------------------------------------------------------------
// PlannedActivityMember
//-------------------------------------------------------------------------------------------------

use {
    culpa::throws,
    sea_orm::entity::prelude::*,
    serde::{Deserialize, Serialize},
    std::sync::LazyLock,
};

// Old diesel schema for reference:
// table! {
//     plannedactivitymembers (id) {
//         id -> Int4,
//         planned_activity_id -> Int4,
//         user_id -> Int4,
//         added -> Timestamptz,
//     }
// }

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "planned_activity_members")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub planned_activity_id: i32,
    pub user_id: i32,
    pub added: ChronoDateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::guardians::Entity",
        from = "Column::UserId",
        to = "super::guardians::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Guardians,
    #[sea_orm(
        belongs_to = "super::plannedactivities::Entity",
        from = "Column::PlannedActivityId",
        to = "super::plannedactivities::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PlannedActivities,
}

impl Related<super::guardians::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Guardians.def()
    }
}

impl Related<super::plannedactivities::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlannedActivities.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Serialize, Deserialize)]
pub struct ActivityMemberTemplate {
    pub psn_name: String,
    pub telegram_name: String,
    pub icon: String,
}

impl Model {
    #[throws(DbErr)]
    pub async fn format_name(&self, connection: &DatabaseConnection) -> String {
        Self::format_member_name(connection, self.user_id).await?
    }

    #[throws(DbErr)]
    pub async fn format_member_name(connection: &DatabaseConnection, user_id: i32) -> String {
        let guardian = super::guardians::Entity::find_by_id(user_id)
            .one(connection)
            .await?
            .ok_or(DbErr::RecordNotFound("Guardian not found".to_string()))?;

        guardian.format_name()
    }

    #[throws(DbErr)]
    pub async fn to_template(&self, connection: &DatabaseConnection) -> ActivityMemberTemplate {
        let guardian = super::guardians::Entity::find_by_id(self.user_id)
            .one(connection)
            .await?
            .ok_or(DbErr::RecordNotFound("Guardian not found".to_string()))?;

        let (telegram_name, psn_name) = guardian.names();
        ActivityMemberTemplate {
            psn_name,
            telegram_name,
            icon: self.icon(),
        }
    }

    pub fn icon(&self) -> String {
        static ICON_POOL: LazyLock<Vec<&str>> = LazyLock::new(|| {
            vec![
                "💂🏻",
                "🕵🏼",
                "🧑🏽‍🏭",
                "🧑‍💻",
                "🧑🏼‍🚒",
                "🧑🏾‍🚀",
                "🥷🏾",
                "🥷🏻",
                "🧙🏽",
                "🧝🏼",
                "🧌",
                "🧛🏼",
                "🧟",
            ]
        });
        ICON_POOL[self.user_id.unsigned_abs() as usize % ICON_POOL.len()].into()
    }
}

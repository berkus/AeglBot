//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1
//-------------------------------------------------------------------------------------------------
// ActivityShortcut
//-------------------------------------------------------------------------------------------------

use sea_orm::entity::prelude::*;

// Old diesel schema for reference:
// table! {
//     activityshortcuts (id) {
//         id -> Int4,
//         name -> Text,
//         game -> Text,
//         link -> Int4,
//     }
// }

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "activity_shortcuts")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text", unique)]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub game: String,
    pub link: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::activities::Entity",
        from = "Column::Link",
        to = "super::activities::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Activities,
}

impl Related<super::activities::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Activities.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// impl Entity {
//     pub fn find_one_by_name(
//         connection: &DatabaseConnection,
//         act_name: &str,
//     ) -> diesel::result::QueryResult<Option<Self>> {

//         <Self as ::diesel::associations::HasTable>::table()
//             .filter(name.eq(act_name))
//             .get_result::<Self>(connection)
//             .optional()
//     }
// }
